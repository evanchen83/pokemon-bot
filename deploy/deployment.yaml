# --- ConfigMap: db-config
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  labels:
    app: discord-bot
data:
  DB_HOST: postgres
  DB_PORT: "5432"
  DB_NAME: cards
  DB_USER: postgres
---
# --- ConfigMap: redis-config
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  labels:
    app: discord-bot
data:
  REDIS_HOST: redis
  REDIS_PORT: "6379"
---
# --- Secret: discord-secrets
apiVersion: v1
kind: Secret
metadata:
  name: discord-secrets
  labels:
    app: discord-bot
stringData:
  DISCORD_BOT_TOKEN: replace-me
  OPENAI_API_KEY: replace-me
  DB_PASSWORD: replace-me
---
# --- Deployment: discord-bot
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discord-bot
  labels:
    app: discord-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discord-bot
  template:
    metadata:
      labels:
        app: discord-bot
    spec:
      initContainers:
        - name: wait-for-postgres-and-redis
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "⏳ Waiting for Postgres and Redis..."
              until nc -z "$DB_HOST" "$DB_PORT"; do
                echo "Waiting for Postgres at $DB_HOST:$DB_PORT..."
                sleep 2
              done
              until nc -z "$REDIS_HOST" "$REDIS_PORT"; do
                echo "Waiting for Redis at $REDIS_HOST:$REDIS_PORT..."
                sleep 2
              done
              echo "✅ Postgres and Redis are reachable!"
          envFrom:
            - configMapRef:
                name: db-config
            - configMapRef:
                name: redis-config
          resources:
            requests:
              cpu: "25m"
              memory: "32Mi"
            limits:
              cpu: "50m"
              memory: "64Mi"
      containers:
        - name: discord-bot
          image: us-east1-docker.pkg.dev/pokemon-bot-471420/docker/pokemon-bot:latest
          envFrom:
            - configMapRef:
                name: db-config
            - configMapRef:
                name: redis-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: DB_PASSWORD
          volumeMounts:
            - name: secret-volume
              mountPath: /etc/secrets
              readOnly: true
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: secret-volume
          secret:
            secretName: discord-secrets
---
# --- Service: postgres
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
# --- StatefulSet: postgres
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_NAME
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: DB_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1"
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -U postgres -d cards -h 127.0.0.1
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 6
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard-rwo
---
# --- Service: redis
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    - port: 6379
  selector:
    app: redis
---
# --- Deployment: redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "128Mi"
              cpu: "200m"
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 6
---
# --- Job: card-db-init
apiVersion: batch/v1
kind: Job
metadata:
  name: card-db-init
spec:
  backoffLimit: 2
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: card-db-init
          image: us-east1-docker.pkg.dev/pokemon-bot-471420/docker/card-db-init:latest
          command:
            - sh
            - -c
            - |
              until pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME"; do
                echo "⏳ Waiting for Postgres to be ready at $DB_HOST:$DB_PORT..."
                sleep 3
              done
              echo "✅ Postgres is ready, running Liquibase..."
              liquibase \
                --url="jdbc:postgresql://$DB_HOST:$DB_PORT/$DB_NAME" \
                --changeLogFile=changelog.sql \
                --username="$DB_USER" \
                --password="$DB_PASSWORD" \
                update
          envFrom:
            - configMapRef:
                name: db-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: DB_PASSWORD
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "500m"
